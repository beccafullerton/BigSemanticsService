<?xml version="1.0" encoding="UTF-8"?>
<!-- requires: (1) ant4eclipse installed as an eclipse plugin; (2) ant-contrib installed; (3) jarsigner.exe be on the path -->

<project name="BigSemanticsService" default="buildwar" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	
	<!-- semantic service project directory-->
	<property name="service.dir" value="${basedir}/.." />
	
	<property name="context.dir" value="${service.dir}/context" />
	
	<property name="config.dir" value="${service.dir}/config" />
	
	<property name="dist.dir" value="${basedir}/dist" />
	
	<property name="distlib.dir" value="${dist.dir}/WEB-INF/lib" />
	
	<property name="distclasses.dir" value="${dist.dir}/WEB-INF/classes" />
	
	<property name="distmetainf.dir" value="${dist.dir}/META-INF" />
	
	<!-- the Eclipse workspace directory -->
	<property name="workspace.dir" value="${service.dir}/.." />
	
	<!-- <property name="mmdrepository.dir" value="${workspace.dir}/MetaMetadataRepository/MmdRepository" /> -->
		
	<property name="simplcore.dir" value="${workspace.dir}/../simplJava/simplCore" />
	
	<property name="cyberneko.dir" value="${workspace.dir}/../BigSemanticsJava/cyberneko" />
	
	<property name="bsSunSpecifics.dir" value="${workspace.dir}/../BigSemanticsJava/BigSemanticsSunSpecifics" />
	
	<property name="bsSDK.dir" value="${workspace.dir}/../BigSemanticsJava/BigSemanticsSDK" />

	<property name="bsCore.dir" value="${workspace.dir}/../BigSemanticsJava/BigSemanticsCore" />
		
	<!-- the projects necessary to run service, based on the project set -->
	<property name="project.set" value="${service.dir}/projectSet.psf" />
	<property name="project.names" value="cyberneko,BigSemanticsCore,BigSemanticsCybernekoWrapper,imageMetadataExtractor,BigSemanticsSunSpecifics,BigSemanticsSDK,BigSemanticsORM" />
	
	<property name="sftp.host" value="ecoarray0" />
	<property name="sftp.user" value="ecologylab" />
	<property name="sftp.port" value="2022" />
	
	<property name="jetty.dir" value="/bigsemantics-service/jetty-dist" />
	
	<!-- declare ant4eclipse -->
	<taskdef resource="net/sf/ant4eclipse/antlib.xml">
		<classpath>
			<pathelement location="${simplcore.dir}/lib/ant4eclipse-0.5.0.rc1.jar" />
			<pathelement location="${simplcore.dir}/lib/ecj.jar" />
			<pathelement location="${simplcore.dir}/lib/org.eclipse.osgi_3.2.0.v20060601.jar" />
		</classpath>
	</taskdef>
	
	<taskdef name="antform" classname="com.sardak.antform.AntForm" classpath="${simplcore.dir}/lib/antform.jar"/>
	
	<!-- optional: declare ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${simplcore.dir}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	<!-- declare maven -->
	<path id="maven-ant-tasks.classpath" path="${basedir}/antlib/maven-ant-tasks-2.1.1.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

	<target name="copy-dependencies" depends="clean">
		<mkdir dir="${distlib.dir}" />
		<mkdir dir="${distmetainf.dir}" />
	    
		<echo>adding maven dependencies</echo>
		<artifact:pom id="servicepom" file="${service.dir}/pom.xml" />
		<artifact:dependencies filesetId="mavendeps" pomRefId="servicepom" />
		<copy todir="${distlib.dir}" flatten="true">
			<fileset refid="mavendeps" />
		</copy>
		<echo>...done.</echo>
		
		<echo>adding additional jar(s)</echo>
		<copy todir="${distlib.dir}">
			<fileset dir="${bsCore.dir}/lib/" includes="simplCore.jar" />
			<fileset dir="${cyberneko.dir}/lib" includes="xercesMinimal.jar" />
			<fileset dir="${bsSunSpecifics.dir}/lib/" includes="simplSunSpecifics.jar" />
			<fileset dir="${bsSunSpecifics.dir}/lib/" includes="BigSemanticsGeneratedClassesJava.jar" />
			<fileset dir="${bsSDK.dir}/lib/" includes="bigSemanticsWrappers.jar" />
		</copy>
		<echo>...done.</echo>
		
		<echo>adding project dependencies</echo>
			<antcall target="build-project-libraries" />
		<echo>...done.</echo>
		
		<echo>adding metainf</echo>
		<copy todir="${distmetainf.dir}">
			<fileset dir="${service.dir}/WebContent/META-INF" />
		</copy>
		<echo>...done.</echo>
	</target>
	
	<!-- build service dependencies, specified by project.set -->
	<!-- contains more than required set through ORM project components not used by service -->
	<target name="build-project-libraries">
		<!-- get the build order for your projects according to their deps -->
		<getBuildOrder buildorderProperty="buildorder" projectNames="${project.names}" workspace="${workspace.dir}" />

		<echo>list of projects to build: ${buildorder}</echo>

		<!-- Build all projects (invoke 'build-project'-target for each project) -->
		<foreach list="${buildorder}" target="jar-project-library" param="project.name" trim="yes" />
	</target>

	<!-- JAR a library and store it in distlib.dir -->
	<target name="jar-project-library" depends="build-library">
		<echo>JARing project ${project.name}</echo>

		<!-- Get the outputpath of your project -->
		<getOutputpath property="myOutputpath" workspace="${workspace.dir}" projectName="${project.name}" />

		<jar destfile="${distlib.dir}/${project.name}.jar" basedir="${myOutputpath}" includes="**/*" />
	</target>
	
	<target name="build-library">
		<echo>Building project ${project.name}</echo>
		<echo>  workspace is at ${workspace.dir}</echo>
		<echo>  project name is ${project.name}</echo>

		<!-- Get the sourcepath of your project -->
		<getSourcepath property="mySourcepath" workspace="${workspace.dir}" projectName="${project.name}" allowMultipleFolders="true" />

		<!-- Get the outputpath of your project -->
		<getOutputpath property="myOutputpath" workspace="${workspace.dir}" projectName="${project.name}" />

		<!-- Get classpath of your project -->
		<getEclipseClasspath pathId="myClasspath" workspace="${workspace.dir}" projectName="${project.name}" />

		<!-- compile your project with the settings from Eclipse -->
		<javac debug="on" debuglevel="lines,vars,source" classpathref="myClasspath" srcdir="${mySourcepath}" destdir="${myOutputpath}" includeantruntime="true" >
			<compilerarg value="-g"/>
		</javac>
		
		<echo>  mySourcepath is ${mySourcepath}</echo>
		<foreach list="${mySourcepath}" target="copy-xml" param="resource.dir" delimiter="${path.separator}" />
		
		<echo>  source is at ${mySourcepath}</echo>
		<echo>  destination is ${myOutputpath}</echo>
	</target>
	
	<target name="copy-xml">
		<getOutputpath property="myOutputpath" workspace="${workspace.dir}" projectName="${project.name}" />
		<copy todir="${myOutputpath}">
	        <fileset dir="${resource.dir}">
	            <include name="**/*.xml" />
	        </fileset>
	    </copy>
	</target>
	
	<!-- Clean this project -->
	<target name="clean">
		<echo>cleaning: emptying ${dist.dir}</echo>
		<delete dir="${dist.dir}" />
		<delete file="${basedir}/${ant.project.name}.war" />
	</target>
	
	<target name="compile" depends="copy-dependencies">
		<mkdir dir="${distclasses.dir}" />
		<antcall target="build-library">
			<param name="project.name" value="${ant.project.name}" />
		</antcall>
		<getOutputpath property="myOutputpath" workspace="${workspace.dir}" projectName="${ant.project.name}" />
		<copy todir="${distclasses.dir}">
	        <fileset dir="${myOutputpath}">
	            <include name="**/*.class" />
	        </fileset>
	    </copy>
	    <!-- <copy todir="${distclasses.dir}">
	        <fileset dir="${mmdrepository.dir}">
	            <include name="**/*.xml" />
	        </fileset>
	    </copy> -->
		<copy file="${config.dir}/service.properties" todir="${distclasses.dir}"/>
		<copy file="${service.dir}/config/log4j.configuration" todir="${distclasses.dir}"/>
	</target>
	
	<target name="buildwar" depends="compile">
		<war basedir="${dist.dir}" destfile="${ant.project.name}.war" webxml="${service.dir}/WebContent/WEB-INF/web.xml">
	        <webinf dir="${dist.dir}/WEB-INF/" />
			<metainf dir="${dist.dir}/META-INF/" />
	    </war>
	</target>
	
	<target name="deploy" depends="buildwar">
		<antform>
			<textProperty label="Please enter sftp password for ${sftp.user}:" password="true" property="sftp.password"/>
		</antform>
		
		<var name="sftp.upload" value="true" />
		<var name="sftp.exists" value="true" />
		<trycatch>
			<try>
				<sshexec host="${sftp.host}" port="${sftp.port}" username="${sftp.user}" password="${sftp.password}" trust="true" command="ls ${jetty.dir}/webapps/${ant.project.name}.war" />
			</try>
			<catch>
				<var name="sftp.exists" value="false" />
			</catch>
			<finally>
				<if>
					<istrue value="${sftp.exists}" />
					<then>
						<input message="${ant.project.name}.war already exists. Overwrite?" validargs="yes,no" addproperty="sftp.overwrite" />
						<if>
							<equals arg1="yes" arg2="${sftp.overwrite}" />
							<then>
								<sshexec host="${sftp.host}" port="${sftp.port}" username="${sftp.user}" password="${sftp.password}" trust="true" command="rm ${jetty.dir}/webapps/${ant.project.name}.war" />
								<var name="sftp.upload" value="true" />
							</then>
							<else>
								<var name="sftp.upload" value="false" />
							</else>
						</if>
					</then>
				</if>
				<if>
					<istrue value="${sftp.upload}"/>
					<then>
						<echo>Deploying on ecoarray...</echo>
						
						<echo>deploying war</echo>
						<scp port="${sftp.port}" file="${basedir}/${ant.project.name}.war" todir="${sftp.user}:${sftp.password}@${sftp.host}:${jetty.dir}/webapps/" trust="true" />
						<echo>...done</echo>
						
						<echo>deploying context</echo>
						<!-- <sshexec host="${sftp.host}" port="${sftp.port}" username="${sftp.user}" password="${sftp.password}" trust="true" command="rm ${jetty.dir}/contexts/${ant.project.name}.xml" /> -->
						<scp port="${sftp.port}" file="${context.dir}/${ant.project.name}.xml" todir="${sftp.user}:${sftp.password}@${sftp.host}:${jetty.dir}/contexts/" trust="true" />
						<echo>...done</echo>
					</then>
				</if>
			</finally>
		</trycatch>
	</target>
</project>
